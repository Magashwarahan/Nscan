import { Card } from "@/components/ui/card";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { Shield, AlertTriangle, CheckCircle, Lock, Unlock } from "lucide-react";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { Badge } from "@/components/ui/badge";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";

interface VulnerabilityReportProps {
  scanResult: string;
}

export const VulnerabilityReport = ({ scanResult }: VulnerabilityReportProps) => {
  const parseVulnerabilities = () => {
    if (!scanResult) return [];
    
    const rows = scanResult.split('\n');
    const vulnerabilities = rows
      .filter(row => row.trim())
      .map(row => {
        const columns = row.split(';');
        const port = columns[4];
        const service = columns[7];
        const state = columns[6];
        const version = columns[8] || 'Unknown';
        
        let riskLevel = "low";
        let impact = "Low impact on system security";
        let mitigation = "Keep the service updated";
        
        // Common vulnerable services
        if (service.includes("telnet")) {
          riskLevel = "critical";
          impact = "Clear text communication, easily intercepted";
          mitigation = "Replace with SSH for secure remote access";
        } else if (service.includes("ftp")) {
          riskLevel = "high";
          impact = "Potential for anonymous access and clear text credentials";
          mitigation = "Use SFTP or FTPS for secure file transfers";
        } else if (service.includes("http") && !service.includes("https")) {
          riskLevel = "medium";
          impact = "Unencrypted web traffic can be intercepted";
          mitigation = "Implement HTTPS with valid SSL/TLS certificates";
        }
        
        return {
          port,
          service,
          state,
          version,
          riskLevel,
          impact,
          mitigation,
          recommendations: [
            getRiskRecommendations(service),
            getVersionRecommendations(version),
            getStateRecommendations(state)
          ].filter(Boolean),
        };
      });
      
    return vulnerabilities;
  };

  const getRiskRecommendations = (service: string) => {
    const recommendations: { [key: string]: string } = {
      http: "Consider implementing HTTPS and keeping web server software updated",
      ftp: "Use SFTP instead of FTP for secure file transfers",
      telnet: "Replace with SSH for secure remote access",
      mysql: "Restrict remote access and use strong authentication",
      smtp: "Configure SPF, DKIM, and DMARC for email security",
      dns: "Implement DNSSEC and restrict zone transfers",
      rdp: "Use Network Level Authentication and restrict access",
    };

    for (const [key, value] of Object.entries(recommendations)) {
      if (service.includes(key)) {
        return value;
      }
    }
    
    return "Keep the service updated and monitor for unusual activity";
  };

  const getVersionRecommendations = (version: string) => {
    if (version === 'Unknown') {
      return "Version information hidden - good security practice, but verify it's up to date";
    }
    return `Verify that ${version} is the latest stable version and has no known vulnerabilities`;
  };

  const getStateRecommendations = (state: string) => {
    if (state.toLowerCase() === 'open') {
      return "Consider if this port needs to be exposed externally";
    }
    return null;
  };

  const vulnerabilities = parseVulnerabilities();
  
  const riskData = vulnerabilities.map((v, index) => ({
    name: `Port ${v.port}`,
    risk: v.riskLevel === "critical" ? 4 : 
          v.riskLevel === "high" ? 3 : 
          v.riskLevel === "medium" ? 2 : 1,
  }));

  const criticalVulnerabilities = vulnerabilities.filter(v => v.riskLevel === "critical");
  const highVulnerabilities = vulnerabilities.filter(v => v.riskLevel === "high");
  const mediumVulnerabilities = vulnerabilities.filter(v => v.riskLevel === "medium");

  return (
    <Card className="p-6 animate-enter">
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">Security Assessment</h3>
          <Shield className="h-5 w-5 text-cyber-teal" />
        </div>

        <div className="h-[200px]">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={riskData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Line type="monotone" dataKey="risk" stroke="#00f2ea" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Card className="p-4 border-red-500/50">
            <div className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-red-500" />
              <h4 className="font-semibold">Critical Risk</h4>
            </div>
            <p className="text-2xl font-bold">{criticalVulnerabilities.length}</p>
          </Card>
          
          <Card className="p-4 border-yellow-500/50">
            <div className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-yellow-500" />
              <h4 className="font-semibold">High Risk</h4>
            </div>
            <p className="text-2xl font-bold">{highVulnerabilities.length}</p>
          </Card>
          
          <Card className="p-4 border-blue-500/50">
            <div className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-blue-500" />
              <h4 className="font-semibold">Medium Risk</h4>
            </div>
            <p className="text-2xl font-bold">{mediumVulnerabilities.length}</p>
          </Card>
        </div>

        <Accordion type="single" collapsible className="w-full">
          {vulnerabilities.map((vulnerability, index) => (
            <AccordionItem key={index} value={`item-${index}`}>
              <AccordionTrigger className="hover:no-underline">
                <div className="flex items-center gap-2">
                  {vulnerability.riskLevel === "critical" || vulnerability.riskLevel === "high" ? (
                    <Unlock className="h-4 w-4 text-red-500" />
                  ) : (
                    <Lock className="h-4 w-4 text-green-500" />
                  )}
                  <span>
                    Port {vulnerability.port} - {vulnerability.service}
                  </span>
                  <Badge 
                    variant={
                      vulnerability.riskLevel === "critical" ? "destructive" :
                      vulnerability.riskLevel === "high" ? "destructive" :
                      vulnerability.riskLevel === "medium" ? "secondary" :
                      "default"
                    }
                    className="ml-2"
                  >
                    {vulnerability.riskLevel}
                  </Badge>
                </div>
              </AccordionTrigger>
              <AccordionContent>
                <div className="space-y-4 pt-4">
                  <Alert>
                    <AlertTitle>Impact</AlertTitle>
                    <AlertDescription>{vulnerability.impact}</AlertDescription>
                  </Alert>
                  
                  <Alert>
                    <AlertTitle>Recommended Actions</AlertTitle>
                    <AlertDescription>
                      <ul className="list-disc pl-4 space-y-2">
                        <li>{vulnerability.mitigation}</li>
                        {vulnerability.recommendations.map((rec, idx) => (
                          rec && <li key={idx}>{rec}</li>
                        ))}
                      </ul>
                    </AlertDescription>
                  </Alert>
                </div>
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>
    </Card>
  );
};
